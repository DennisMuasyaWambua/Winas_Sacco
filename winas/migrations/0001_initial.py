# Generated by Django 5.2.1 on 2025-05-22 08:10

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import winas.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='KeyResultArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kra_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the KRA, especially for soft skills.', null=True)),
            ],
            options={
                'verbose_name': 'Key Result Area',
                'verbose_name_plural': 'Key Result Areas',
            },
        ),
        migrations.CreateModel(
            name='Pillar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pillar_name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Pillars',
            },
        ),
        migrations.CreateModel(
            name='RatingKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point_scale_min', models.IntegerField()),
                ('point_scale_max', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('associated_weight', models.IntegerField(blank=True, help_text='Weight associated with this rating key (e.g., for Soft Skills).', null=True)),
            ],
            options={
                'verbose_name': 'Rating Key',
                'verbose_name_plural': 'Rating Keys',
                'ordering': ['point_scale_min'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('employee_number', models.CharField(blank=True, help_text='Corresponds to PF.NO in the appraisal tool.', max_length=50, null=True, unique=True)),
                ('annual_salary', models.DecimalField(blank=True, decimal_places=2, help_text="Employee's annual salary for bonus calculation.", max_digits=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='winas.department')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='winas.role')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
            managers=[
                ('objects', winas.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DevelopmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_description', models.TextField()),
                ('manager_actions', models.TextField(blank=True, help_text="Manager's actions related to the development plan.", null=True)),
                ('targeted_completion_date', models.DateField(blank=True, null=True)),
                ('manager_signature_date', models.DateField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='development_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Development Plan',
                'verbose_name_plural': 'Development Plans',
            },
        ),
        migrations.CreateModel(
            name='PerformanceTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_description', models.TextField(help_text="The specific target description (e.g., 'Recruit 40 new members').")),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='The numerical target figure (e.g., 40, 80000000).', max_digits=15, null=True)),
                ('annual_target', models.DecimalField(blank=True, decimal_places=2, help_text='The annual target, which might differ from the primary target_value.', max_digits=15, null=True)),
                ('weight', models.DecimalField(decimal_places=2, help_text='The weight assigned to this target.', max_digits=5)),
                ('kra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_targets', to='winas.keyresultarea')),
            ],
            options={
                'verbose_name': 'Performance Target',
                'verbose_name_plural': 'Performance Targets',
            },
        ),
        migrations.AddField(
            model_name='keyresultarea',
            name='pillar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kras', to='winas.pillar'),
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings_attended', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Trainings',
            },
        ),
        migrations.CreateModel(
            name='OverallAppraisal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_under_review', models.CharField(max_length=100)),
                ('strategic_objectives_score', models.DecimalField(decimal_places=2, help_text='Total score for Strategic Objectives (e.g., Section B).', max_digits=5)),
                ('soft_skills_score', models.DecimalField(decimal_places=2, help_text='Total score for Soft Skills (e.g., Section C).', max_digits=5)),
                ('total_performance_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Combined score (Strategic Objectives + Soft Skills).', max_digits=5, null=True)),
                ('final_comments_appraisee', models.TextField(blank=True, null=True)),
                ('final_comments_appraiser', models.TextField(blank=True, null=True)),
                ('final_comments_hod', models.TextField(blank=True, null=True)),
                ('final_comments_hr', models.TextField(blank=True, null=True)),
                ('final_comments_ceo', models.TextField(blank=True, null=True)),
                ('date_of_appraisal', models.DateField()),
                ('appraiser', models.ForeignKey(blank=True, help_text='The supervisor who conducted the appraisal.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appraisals_given', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(help_text='The employee being appraised.', on_delete=django.db.models.deletion.CASCADE, related_name='overall_appraisal', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Overall Appraisal',
                'verbose_name_plural': 'Overall Appraisals',
                'unique_together': {('user', 'period_under_review')},
            },
        ),
        migrations.CreateModel(
            name='EmployeePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_under_review', models.CharField(max_length=100)),
                ('actual_achievement', models.DecimalField(decimal_places=2, help_text='The actual value achieved by the employee.', max_digits=15)),
                ('percentage_achieved', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated: Actual Achievement / Target Value.', max_digits=5, null=True)),
                ('actual_rating', models.IntegerField(blank=True, help_text='The rating given for the achievement (e.g., 60, 100).', null=True)),
                ('weighted_average', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated: Percentage Achieved * Weight.', max_digits=5, null=True)),
                ('comments', models.TextField(blank=True, help_text="Supervisor's comments on this specific performance area.", null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to=settings.AUTH_USER_MODEL)),
                ('performance_target', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='employee_performances', to='winas.performancetarget')),
            ],
            options={
                'verbose_name': 'Employee Performance',
                'verbose_name_plural': 'Employee Performances',
                'unique_together': {('user', 'performance_target', 'period_under_review')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='keyresultarea',
            unique_together={('pillar', 'kra_name')},
        ),
        migrations.CreateModel(
            name='SoftSkillRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_under_review', models.CharField(default='Annual', max_length=100)),
                ('rating', models.IntegerField(help_text='The score given for the soft skill (e.g., 80, 70).')),
                ('weight', models.DecimalField(decimal_places=2, help_text='The weight of the soft skill.', max_digits=5)),
                ('weighted_average', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated: Rating * Weight (assuming rating is scaled, e.g., out of 100).', max_digits=5, null=True)),
                ('comments', models.TextField(blank=True, help_text='Comments related to the soft skill rating.', null=True)),
                ('soft_skill_kra', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='soft_skill_ratings', to='winas.keyresultarea')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soft_skill_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Soft Skill Rating',
                'verbose_name_plural': 'Soft Skill Ratings',
                'unique_together': {('user', 'soft_skill_kra', 'period_under_review')},
            },
        ),
    ]
